name: Generate Weekly Devotions (Friâ€“Thu)

on:
  workflow_dispatch:
    inputs:
      start_date:
        description: "Start date (YYYY-MM-DD). Blank = script default"
        required: false
        default: ""
      days:
        description: "How many days (default 8)"
        required: false
        default: "8"

concurrency:
  group: generate-weekly
  cancel-in-progress: true

jobs:
  gen-weekly:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_PROJECT: ${{ secrets.OPENAI_PROJECT }}
      GH_PAT: ${{ secrets.GH_PAT }}
      APP_TZ: America/New_York
      GEN_MODEL: gpt-5-mini
      GEN_FALLBACK: gpt-5-mini
      GEN_TEMP: "1"
      GEN_TEMP_REPAIR: "1"
      GEN_TEMP_QUOTE: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 jsonschema openai
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Syntax check generate_weekly.py
        shell: bash
        run: |
          python - <<'PY'
          import ast, pathlib
          p = pathlib.Path('scripts/generate_weekly.py')
          ast.parse(p.read_text(encoding='utf-8'))
          print("Syntax OK:", p)
          PY

      - name: Show existing weeklyfeed.json (if present)
        run: |
          if [ -f public/weeklyfeed.json ]; then
            echo "SHA: $GITHUB_SHA"
            head -n 60 public/weeklyfeed.json
          else
            echo "No existing public/weeklyfeed.json (first run?)"
          fi

      - name: USCCB precheck (no OpenAI calls)
        timeout-minutes: 2
        continue-on-error: true
        env:
          USCCB_PRECHECK: "1"
          START_DATE: ${{ github.event.inputs.start_date }}
          DAYS: ${{ github.event.inputs.days }}
        run: |
          set +e
          python scripts/generate_weekly.py || true
          echo "::warning::USCCB precheck may time out (network/markup changes). Continuing."

      - name: Generate weeklyfeed.json
        env:
          TZ: America/New_York
          START_DATE: ${{ github.event.inputs.start_date }}
          DAYS: ${{ github.event.inputs.days }}
          USCCB_STRICT: "0"
        run: |
          set -euo pipefail
          python scripts/generate_weekly.py

      - name: Debug invalid rows (types/keys)
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          import json
          d = json.load(open('public/weeklyfeed.json','r',encoding='utf-8'))
          req = ["date","quote","quoteCitation","firstReading","secondReading",
                 "psalmSummary","gospelSummary","saintReflection","dailyPrayer",
                 "theologicalSynthesis","exegesis","usccbLink","cycle","weekdayCycle",
                 "feast","gospelReference","firstReadingRef","secondReadingRef",
                 "psalmRef","gospelRef","lectionaryKey"]
          bad = []
          for i, row in enumerate(d, 1):
              miss = [k for k in req if k not in row]
              types = [k for k in ("secondReading","secondReadingRef","feast")
                       if not isinstance(row.get(k, ""), str)]
              if miss or types:
                  bad.append({"index": i,
                              "missing": miss,
                              "bad_types": {k: type(row.get(k)).__name__ for k in types}})
          print("length:", len(d))
          if bad:
              print("Problems:", bad)
          else:
              print("No key/type problems found.")
          PY

      - name: Validate weeklyfeed.json (python, clear errors)
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          import json, sys, pathlib
          p = pathlib.Path("public/weeklyfeed.json")
          if not p.exists():
              print("weeklyfeed.json missing"); sys.exit(1)
          data = json.loads(p.read_text(encoding="utf-8"))

          - # 1) length check
          - if not isinstance(data, list) or len(data) != 7:
          -     print(f"Expected 7 rows, got: {type(data).__name__} len={len(data) if isinstance(data,list) else 'n/a'}")
          + # 1) length check
          + if not isinstance(data, list) or len(data) != 8:
          +     print(f"Expected 8 rows, got: {type(data).__name__} len={len(data) if isinstance(data,list) else 'n/a'}")
                sys.exit(1)

          - print("weeklyfeed.json OK: 7 rows, required keys present, types good.")
          + print("weeklyfeed.json OK: 8 rows, required keys present, types good.")

          required = [
              "date","quote","quoteCitation","firstReading","secondReading",
              "psalmSummary","gospelSummary","saintReflection","dailyPrayer",
              "theologicalSynthesis","exegesis","usccbLink","cycle","weekdayCycle",
              "feast","gospelReference","firstReadingRef","secondReadingRef",
              "psalmRef","gospelRef","lectionaryKey","tags"
          ]
          type_string = {"secondReading","secondReadingRef","feast"}
          errs = []

          for i,row in enumerate(data, start=1):
              if not isinstance(row, dict):
                  errs.append({"index": i, "error": "not_object", "type": type(row).__name__})
                  continue
              missing = [k for k in required if k not in row]
              bad_types = {k:type(row.get(k)).__name__ for k in type_string if not isinstance(row.get(k, ""), str)}
              shape = []
              if not str(row.get("cycle","")).startswith("Year "): shape.append("cycle")
              if not str(row.get("weekdayCycle","")).startswith("Cycle "): shape.append("weekdayCycle")
              if missing or bad_types or shape:
                  errs.append({"index": i, "missing": missing, "bad_types": bad_types, "shape": shape})

          if errs:
              print("Validation errors:")
              for e in errs: print(" -", e)
              sys.exit(1)

          print("weeklyfeed.json OK: 7 rows, required keys present, types good.")
          PY

      - name: Commit and push weeklyfeed.json (safe)
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add public/weeklyfeed.json
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          git commit -m "chore: weeklyfeed update (auto)"
          git fetch origin main
          git -c rebase.autoStash=true pull --rebase origin main
          git push origin HEAD:main
