name: Generate Weekly Devotions (Fri–Thu)

on:
  workflow_dispatch:
    inputs:
      start_date:
        description: "Start date (YYYY-MM-DD). Blank = script default"
        required: false
        default: ""
      days:
        description: "How many days (default 7)"
        required: false
        default: "7"

concurrency:
  group: generate-weekly
  cancel-in-progress: true

jobs:
  gen-weekly:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_PROJECT: ${{ secrets.OPENAI_PROJECT }}
      GH_PAT: ${{ secrets.GH_PAT }}
      APP_TZ: America/New_York
      GEN_MODEL: gpt-5-mini
      GEN_FALLBACK: gpt-5-mini
      GEN_TEMP: "1"
      GEN_TEMP_REPAIR: "1"
      GEN_TEMP_QUOTE: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 jsonschema openai
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Syntax check generate_weekly.py
        shell: bash
        run: |
          python - <<'PY'
          import ast, pathlib
          p = pathlib.Path('scripts/generate_weekly.py')
          ast.parse(p.read_text(encoding='utf-8'))
          print("Syntax OK:", p)
          PY

      - name: Show existing weeklyfeed.json (if present)
        run: |
          if [ -f public/weeklyfeed.json ]; then
            echo "SHA: $GITHUB_SHA"
            head -n 60 public/weeklyfeed.json
          else
            echo "No existing public/weeklyfeed.json (first run?)"
          fi

      - name: USCCB precheck (no OpenAI calls)
        timeout-minutes: 2
        continue-on-error: true
        env:
          USCCB_PRECHECK: "1"
          START_DATE: ${{ github.event.inputs.start_date }}
          DAYS: ${{ github.event.inputs.days }}
        run: |
          set +e
          python scripts/generate_weekly.py || true
          echo "::warning::USCCB precheck may time out (network/markup changes). Continuing."

      - name: Generate weeklyfeed.json
        env:
          TZ: America/New_York
          START_DATE: ${{ github.event.inputs.start_date }}
          DAYS: ${{ github.event.inputs.days }}
          USCCB_STRICT: "0"
        run: |
          set -euo pipefail
          python scripts/generate_weekly.py

      - name: Debug invalid rows (types/keys)
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          import json
          d = json.load(open('public/weeklyfeed.json','r',encoding='utf-8'))
          req = ["date","quote","quoteCitation","firstReading","secondReading",
                 "psalmSummary","gospelSummary","saintReflection","dailyPrayer",
                 "theologicalSynthesis","exegesis","usccbLink","cycle","weekdayCycle",
                 "feast","gospelReference","firstReadingRef","secondReadingRef",
                 "psalmRef","gospelRef","lectionaryKey"]
          bad = []
          for i, row in enumerate(d, 1):
              miss = [k for k in req if k not in row]
              types = [k for k in ("secondReading","secondReadingRef","feast")
                       if not isinstance(row.get(k, ""), str)]
              if miss or types:
                  bad.append({"index": i,
                              "missing": miss,
                              "bad_types": {k: type(row.get(k)).__name__ for k in types}})
          print("length:", len(d))
          if bad:
              print("Problems:", bad)
          else:
              print("No key/type problems found.")
          PY

      - name: Validate weeklyfeed.json shape & fields (granular)
        shell: bash
        run: |
          set -euo pipefail
          test -f public/weeklyfeed.json

          echo "• Check length == 7"
          jq 'length==7' public/weeklyfeed.json | grep -qx true

          echo "• Check each row is an object and has required keys"
          jq -r '
            to_entries
            | [ .[] as $e
                | ($e.value|type) as $t
                | ($t=="object") as $isobj
                | { index: ($e.key|tonumber),
                    type: $t,
                    ok: ( $isobj and ( $e.value | [
                        has("date"), has("quote"), has("quoteCitation"), has("firstReading"),
                        has("psalmSummary"), has("gospelSummary"), has("saintReflection"),
                        has("dailyPrayer"), has("theologicalSynthesis"), has("exegesis"),
                        has("secondReading"), has("tags"), has("usccbLink"),
                        has("cycle"), has("weekdayCycle"), has("feast"),
                        has("gospelReference"), has("firstReadingRef"), has("secondReadingRef"),
                        has("psalmRef"), has("gospelRef"), has("lectionaryKey")
                      ] | all) ),
                    missing: ( if $isobj then
                      [ "date","quote","quoteCitation","firstReading","psalmSummary","gospelSummary",
                        "saintReflection","dailyPrayer","theologicalSynthesis","exegesis",
                        "secondReading","tags","usccbLink","cycle","weekdayCycle","feast",
                        "gospelReference","firstReadingRef","secondReadingRef","psalmRef","gospelRef","lectionaryKey"
                      ] | map(select( ($e.value|has(.))|not))
                      else [] end )
                  }
              ]
            | map(select((.ok==false) or (.type!="object")))
          ' public/weeklyfeed.json | tee /tmp/rows_bad.json
          test "$(jq 'length' /tmp/rows_bad.json)" = "0"

          echo "• Check cycle fields shape"
          jq -e 'all(.[]; (.cycle|tostring|startswith("Year ")) and (.weekdayCycle|tostring|startswith("Cycle ")))' public/weeklyfeed.json >/dev/null

          echo "• Check string types for sensitive fields"
          jq -e 'all(.[]; ((.secondReading // "")|type=="string") and ((.feast // "")|type=="string") and ((.secondReadingRef // "")|type=="string"))' public/weeklyfeed.json >/dev/null

      - name: Commit and push weeklyfeed.json (safe)
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add public/weeklyfeed.json
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          git commit -m "chore: weeklyfeed update (auto)"
          git fetch origin main
          git -c rebase.autoStash=true pull --rebase origin main
          git push origin HEAD:main
