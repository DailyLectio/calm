name: Generate Weekly Devotions (Fri–Thu)

on:
  schedule:
    - cron: "0 8 * * 2"   # 3:00am EST (UTC-5) winter
    - cron: "0 7 * * 2"   # 3:00am EDT (UTC-4) summer
  workflow_dispatch:
    inputs:
      start_date:
        description: "Start date (YYYY-MM-DD). Blank = script default"
        required: false
        default: ""
      days:
        description: "How many days to generate (default 7)"
        required: false
        default: "7"

jobs:
  gen-weekly:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    # Secrets are injected here so every step sees them.
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}   # sk-proj_… (or sk-…)
      OPENAI_PROJECT: ${{ secrets.OPENAI_PROJECT }}   # proj_… (required when using sk-proj_…)
      APP_TZ: America/New_York
      GEN_MODEL: gpt-4o-mini
      GEN_FALLBACK: gpt-4o-mini
      GEN_TEMP: "0.60"
      GEN_TEMP_REPAIR: "0.55"
      GEN_TEMP_QUOTE: "0.35"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0            # full history so rebase works
          persist-credentials: true # use the default GITHUB_TOKEN for pushes


      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests jsonschema "openai>=1.0.0"
          sudo apt-get update && sudo apt-get install -y jq

      - name: Sanity check OpenAI env
        run: |
          python - <<'PY'
          import os, sys
          key = os.getenv("OPENAI_API_KEY","")
          proj = os.getenv("OPENAI_PROJECT","")
          print("Has OPENAI_API_KEY?", bool(key))
          print("Has OPENAI_PROJECT?", bool(proj))
          if key.startswith("sk-proj-") and not proj:
              print("FATAL: Project-scoped key detected (sk-proj-…), but OPENAI_PROJECT is not set.", file=sys.stderr)
              sys.exit(1)
          PY

      - name: Show existing weeklyfeed.json (if present)
        run: |
          if [ -f public/weeklyfeed.json ]; then
            echo "SHA: $GITHUB_SHA"
            head -n 60 public/weeklyfeed.json
          else
            echo "No existing public/weeklyfeed.json (first run?)"
          fi

      # Fast scrape-only check to ensure USCCB parsing works for the target window
      - name: USCCB precheck (no OpenAI calls)
        env:
          TZ: America/New_York
        run: |
          set -euo pipefail
          export START_DATE="${{ github.event.inputs.start_date }}"
          export DAYS="${{ github.event.inputs.days }}"
          export USCCB_PRECHECK=1
          python scripts/generate_weekly.py

      - name: Generate weeklyfeed.json
        env:
          TZ: America/New_York
        run: |
          set -euo pipefail
          export START_DATE="${{ github.event.inputs.start_date }}"
          export DAYS="${{ github.event.inputs.days }}"
          python scripts/generate_weekly.py

      - name: Validate weeklyfeed.json shape & fields
        run: |
          set -euo pipefail
          test -f public/weeklyfeed.json
          jq 'length==7' public/weeklyfeed.json >/dev/null
          jq -e 'all(.[]; has("date") and has("quote") and has("quoteCitation") and has("firstReading") and has("psalmSummary") and has("gospelSummary") and has("saintReflection") and has("dailyPrayer") and has("theologicalSynthesis") and has("exegesis") and has("secondReading") and has("tags") and has("usccbLink") and has("cycle") and has("weekdayCycle") and has("feast") and has("gospelReference") and has("firstReadingRef") and has("secondReadingRef") and has("psalmRef") and has("gospelRef") and has("lectionaryKey"))' public/weeklyfeed.json >/dev/null
          jq -e 'all(.[]; (.cycle|tostring|startswith("Year ")) and (.weekdayCycle|tostring|startswith("Cycle ")))' public/weeklyfeed.json >/dev/null
          jq -e 'all(.[]; (.secondReading|type=="string") and (.feast|type=="string") and (.secondReadingRef|type=="string"))' public/weeklyfeed.json >/dev/null

      - name: Commit and push weeklyfeed.json
  env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  run: |
    set -euxo pipefail

    # Configure committer
    git config user.name "github-actions[bot]"
    git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

    # Stage and commit if there are changes
    git add public/weeklyfeed.json
    if git diff --staged --quiet; then
      echo "No changes to commit"
      exit 0
    fi
    git commit -m "chore: weeklyfeed update (auto)"

    # Rebase our new commit onto the latest remote main to avoid non-FF pushes
    git fetch origin main
    git -c rebase.autoStash=true rebase origin/main || {
      echo "::warning::Rebase reported conflicts; preferring generated weeklyfeed.json"
      git checkout --theirs public/weeklyfeed.json || true
      git add public/weeklyfeed.json || true
      git rebase --continue || true
    }

    # Safe push: only force if the remote tip is the one we rebased onto
    git push --force-with-lease origin HEAD:main
