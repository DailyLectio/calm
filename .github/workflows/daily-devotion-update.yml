# From your repo root
python - <<'PY'
import re, pathlib
p = pathlib.Path('.github/workflows/daily-devotion-update.yml')
t = p.read_text(encoding='utf-8')

# 1) Add/fix the "Locate weeklyfeed file" step
locate = '''      - name: Locate weeklyfeed file
        id: locate
        run: |
          set -euo pipefail
          if [ -f public/feeds/weeklyfeed.json ]; then FEED=public/feeds/weeklyfeed.json
          elif [ -f public/weeklyfeed.json ]; then FEED=public/weeklyfeed.json
          else echo "No weeklyfeed.json found" >&2; exit 1; fi
          echo "feed=$FEED" >> "$GITHUB_OUTPUT"
          echo "[daily] using $FEED"
'''
if re.search(r"(?m)^ {6}- name: Locate weeklyfeed file", t):
    t = re.sub(r"(?ms)^ {6}- name: Locate weeklyfeed file.*?(?=^ {6}- name:|\Z)", locate, t)
else:
    # insert right after "Install deps" step
    t = re.sub(r"(?ms)^ {6}- name: Install deps\n {8}run: \|\n.*?\n(?= {6}- name:)", lambda m: m.group(0) + locate, t)

# 2) Make the pre-check read the located path
precheck = ("      - name: Show weeklyfeed.json header (pre-check)\n"
            "        run: |\n"
            "          head -n 60 \"${{ steps.locate.outputs.feed }}\" || { echo \"weeklyfeed.json not found\"; exit 1; }\n")
t = re.sub(r"(?ms)^ {6}- name: Show weeklyfeed\.json header \(pre-check\)\n {8}run: \|\n.*?(?=^ {6}- name:|\Z)", precheck, t)

# 3) Structure-aware patch step
patch_py = '''      - name: Patch missing scripture refs for today
        run: |
          python3 - <<'PY'
          import os, json, sys
          from datetime import datetime
          try:
              from zoneinfo import ZoneInfo
          except Exception:
              ZoneInfo = None

          tz = os.environ.get("APP_TZ","UTC")
          today = (datetime.now(ZoneInfo(tz)).date().isoformat()
                   if ZoneInfo else datetime.utcnow().date().isoformat())

          feed_path = "${{ steps.locate.outputs.feed }}"
          with open(feed_path,"r",encoding="utf-8") as f:
              raw = json.load(f)

          key = None
          if isinstance(raw, list):
              days = raw
          elif isinstance(raw, dict):
              if isinstance(raw.get("days"), list):
                  key, days = "days", raw["days"]
              elif isinstance(raw.get("daily"), list):
                  key, days = "daily", raw["daily"]
              else:
                  print("ERROR: weeklyfeed.json has neither 'days' nor 'daily' list"); sys.exit(1)
          else:
              print("ERROR: weeklyfeed.json is neither list nor object"); sys.exit(1)

          by = {str(d.get("date","")).strip(): d for d in days if isinstance(d, dict)}
          row = by.get(today)
          if not row:
              print(f"ERROR: No entry for today ({today}) in weeklyfeed.json"); sys.exit(1)

          # minimal, safe normalization (add your own patches here if needed)
          if not str(row.get("gospelReference","")).strip():
              row["gospelReference"] = row.get("gospelRef","")

          # write back in the same shape we read
          if key is None:
              out = days
          else:
              raw[key] = days
              out = raw
          with open(feed_path,"w",encoding="utf-8") as f:
              json.dump(out, f, ensure_ascii=False, indent=2)
          print("Patched OK for", today)
          PY
'''
t = re.sub(r"(?ms)^ {6}- name: Patch missing scripture refs for today\n {8}run: \|\n.*?(?=^ {6}- name:|\Z)", patch_py, t)

# 4) Structure-aware verify step
verify_py = '''      - name: Verify required fields for today
        run: |
          python3 - <<'PY'
          import json, os, sys
          from datetime import datetime
          try:
              from zoneinfo import ZoneInfo
          except Exception:
              ZoneInfo = None

          tz = os.environ.get("APP_TZ","UTC")
          today = (datetime.now(ZoneInfo(tz)).date().isoformat()
                   if ZoneInfo else datetime.utcnow().date().isoformat())

          feed_path = "${{ steps.locate.outputs.feed }}"
          with open(feed_path,"r",encoding="utf-8") as f:
              raw = json.load(f)

          if isinstance(raw, list):
              days = raw
          elif isinstance(raw, dict):
              days = raw.get("days") or raw.get("daily") or []
          else:
              print("ERROR: weeklyfeed.json is neither list nor object"); sys.exit(1)

          by = {str(e.get("date","")).strip(): e for e in days if isinstance(e, dict)}
          row = by.get(today)
          if not row:
              print(f"ERROR: No entry for today ({today}) in weeklyfeed.json"); sys.exit(1)

          required = [
            "quote","quoteCitation","firstReading","psalmSummary","gospelSummary",
            "saintReflection","dailyPrayer","theologicalSynthesis","exegesis",
            "usccbLink","cycle","weekdayCycle","gospelRef","firstReadingRef","psalmRef"
          ]
          miss = [k for k in required if not str(row.get(k,'')).strip()]
          if miss:
            print("ERROR: Missing/empty keys for today:", miss); sys.exit(1)
          print("OK for today:", today)
          PY
'''
t = re.sub(r"(?ms)^ {6}- name: Verify required fields for today\n {8}run: \|\n.*?(?=^ {6}- name:|\Z)", verify_py, t)

# Final tidy: ensure step headers are at 6 spaces; sub-keys at 8
t = t.replace("\n        - name:", "\n      - name:")
t = t.replace("\n      id:", "\n        id:")
t = t.replace("\n      run:", "\n        run:")

p.write_text(t, encoding='utf-8')
print("Patched", p)
PY

git add .github/workflows/daily-devotion-update.yml
git commit -m "daily: fix YAML indent; locate weeklyfeed; object-or-list safe"
git fetch origin
git pull --rebase origin main || true
git push
