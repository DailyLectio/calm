name: Update Daily Devotion

on:
  schedule:
    - cron: "2 7 * * *"   # daily ~03:02 ET during EDT
  workflow_dispatch:

jobs:
  update-devotion:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      APP_TZ: America/New_York
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Checkout repo (main, full history)
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install openai

      # ---- PRE-RUN VISIBILITY ----
      - name: Show weeklyfeed.json header (pre-check)
        run: |
          echo "SHA: $GITHUB_SHA"
          if [ -f public/weeklyfeed.json ]; then
            head -n 60 public/weeklyfeed.json
          else
            echo "public/weeklyfeed.json not found"; exit 1
          fi

      # Patch missing refs for TODAY, then save back to public/weeklyfeed.json
      - name: Patch missing scripture refs for today
        run: |
          python3 - <<'PY'
          import os, json, sys
          from datetime import datetime
          try:
              from zoneinfo import ZoneInfo
          except Exception:
              ZoneInfo = None
          from openai import OpenAI

          tz = os.environ.get("APP_TZ","UTC")
          today = (datetime.now(ZoneInfo(tz)).date().isoformat()
                   if ZoneInfo else datetime.utcnow().date().isoformat())

          with open("public/weeklyfeed.json","r",encoding="utf-8") as f:
              week = json.load(f)
          if not isinstance(week, list):
              print("ERROR: weeklyfeed.json is not a top-level array"); sys.exit(1)

          by = {str(d.get("date","")).strip(): d for d in week if isinstance(d, dict)}
          row = by.get(today)
          if not row:
              print(f"ERROR: No entry for today ({today}) in weeklyfeed.json"); sys.exit(1)

          need = [k for k in ("firstReadingRef","psalmRef") if not str(row.get(k,"")).strip()]
          if need:
              client = OpenAI()
              prompt = (
                "Provide exact Catholic daily Mass scripture references (book chapter:verses) for this date. "
                "Return JSON with keys: firstReadingRef, psalmRef, gospelRef, secondReadingRef ('' if none). "
                f"Date: {today}\nUSCCB: {row.get('usccbLink','')}\n"
                f"Cycle: {row.get('cycle','')}\nWeekdayCycle: {row.get('weekdayCycle','')}\nFeast: {row.get('feast','')}\n"
              )
              r = client.chat.completions.create(
                model="gpt-4o-mini",
                temperature=0.2,
                response_format={"type":"json_object"},
                messages=[
                  {"role":"system","content":"Return only valid scripture reference strings; no commentary."},
                  {"role":"user","content": prompt},
                ],
              )
              try:
                  fix = json.loads(r.choices[0].message.content)
              except Exception:
                  fix = {}

              row["firstReadingRef"] = row.get("firstReadingRef") or fix.get("firstReadingRef","")
              row["psalmRef"]       = row.get("psalmRef")       or fix.get("psalmRef","")
              # keep both gospel keys identical for your app
              if not str(row.get("gospelRef","")).strip():
                  row["gospelRef"] = fix.get("gospelRef","")
              if not str(row.get("gospelReference","")).strip():
                  row["gospelReference"] = row.get("gospelRef","")

              # WRITE PATCH BACK TO REPO FILE
              with open("public/weeklyfeed.json","w",encoding="utf-8") as f:
                  json.dump(week, f, ensure_ascii=False, indent=2)

              print("Patched refs for", today, "â†’",
                    "firstReadingRef:", row.get("firstReadingRef"),
                    "| psalmRef:", row.get("psalmRef"))
          else:
              print("Refs already present for", today)
          PY

      # Enforce required fields after patch
      - name: Verify required fields for today
        run: |
          python3 - <<'PY'
          import json, os, sys
          from datetime import datetime
          try:
              from zoneinfo import ZoneInfo
          except Exception:
              ZoneInfo = None

          tz = os.environ.get("APP_TZ","UTC")
          today = (datetime.now(ZoneInfo(tz)).date().isoformat()
                   if ZoneInfo else datetime.utcnow().date().isoformat())

          with open("public/weeklyfeed.json","r",encoding="utf-8") as f:
              data = json.load(f)
          if not isinstance(data, list):
              print("ERROR: weeklyfeed.json is not a top-level array"); sys.exit(1)

          by = {str(e.get("date","")).strip(): e for e in data if isinstance(e, dict)}
          row = by.get(today)
          if not row:
              print(f"ERROR: No entry for today ({today}) in weeklyfeed.json"); sys.exit(1)

          required = [
            "quote","quoteCitation","firstReading","psalmSummary","gospelSummary",
            "saintReflection","dailyPrayer","theologicalSynthesis","exegesis",
            "usccbLink","cycle","weekdayCycle","gospelRef","firstReadingRef","psalmRef"
          ]
          missing = [k for k in required if not str(row.get(k,'')).strip()]
          if missing:
            print("ERROR: Missing/empty keys for today:", missing); sys.exit(1)
          print("OK for today:", today)
          PY

      # ---- RUN THE DAILY UPDATE ----
      - name: Run daily devotion update (Python)
        run: |
          python3 update_daily_devotion.py --tz "$APP_TZ"

      # ---- POST-RUN VISIBILITY (artifact) ----
      - name: Show dist/devotions.json header (post-generate)
        run: |
          if [ -f dist/devotions.json ]; then
            head -n 60 dist/devotions.json
          else
            echo "dist/devotions.json not written"; exit 1
          fi

      - name: Prepare artifact for commit
        run: |
          set -euo pipefail
          mkdir -p public
          cp dist/devotions.json public/devotions.json

      - name: Show public/devotions.json header (post-copy)
        run: |
          head -n 60 public/devotions.json

      - name: Commit and push changes
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          set -euo pipefail
          git config --local user.name "GitHub Action"
          git config --local user.email "action@github.com"

          # Commit BOTH files so the ref patch persists
          git add public/weeklyfeed.json public/devotions.json

          if ! git diff --staged --quiet; then
            git commit -m "Daily devotion update for $(date +%Y-%m-%d)"
            git push https://x-access-token:${GH_PAT}@github.com/DailyLectio/calm.git HEAD:main
          else
            echo "No changes to commit"
          fi