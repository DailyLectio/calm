name: Update Daily Devotion

on:
  schedule:
    - cron: "5 8 * * *"   # daily 08:05 UTC (adjust as needed)
  workflow_dispatch: {}

jobs:
  update-devotion:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      APP_TZ: America/New_York
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Checkout repo (main, full history)
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install openai jq

      - name: Locate weeklyfeed file
        id: locate
        run: |
          set -euo pipefail
          if [ -f public/feeds/weeklyfeed.json ]; then FEED=public/feeds/weeklyfeed.json
          elif [ -f public/weeklyfeed.json ]; then FEED=public/weeklyfeed.json
          else echo "No weeklyfeed.json found" >&2; exit 1; fi
          echo "feed=$FEED" >> "$GITHUB_OUTPUT"
          echo "[daily] using $FEED"

      - name: Show weeklyfeed.json header (pre-check)
        run: |
          head -n 60 "${{ steps.locate.outputs.feed }}" || { echo "weeklyfeed.json not found"; exit 1; }

      # Patch missing refs for TODAY, then save back
      - name: Patch missing scripture refs for today
        run: |
          python3 - <<'PY'
          import os, json, sys
          from datetime import datetime
          try:
              from zoneinfo import ZoneInfo
          except Exception:
              ZoneInfo = None

          tz = os.environ.get("APP_TZ","UTC")
          today = (datetime.now(ZoneInfo(tz)).date().isoformat()
                   if ZoneInfo else datetime.utcnow().date().isoformat())

          feed_path = "${{ steps.locate.outputs.feed }}"
          with open(feed_path,"r",encoding="utf-8") as f:
              raw = json.load(f)

          key = None
          if isinstance(raw, list):
              days = raw
          elif isinstance(raw, dict):
              if isinstance(raw.get("days"), list):
                  key, days = "days", raw["days"]
              elif isinstance(raw.get("daily"), list):
                  key, days = "daily", raw["daily"]
              else:
                  print("ERROR: weeklyfeed.json has neither 'days' nor 'daily' list"); sys.exit(1)
          else:
              print("ERROR: weeklyfeed.json is neither list nor object"); sys.exit(1)

          # locate todayâ€™s row
          by = {str(d.get("date","")).strip(): d for d in days if isinstance(d, dict)}
          row = by.get(today)
          if not row:
              print(f"ERROR: No entry for today ({today}) in weeklyfeed.json"); sys.exit(1)

          # minimal, safe normalization (add more rules here as needed)
          if not str(row.get("gospelReference","")).strip():
              row["gospelReference"] = row.get("gospelRef","")

          # write back in the same shape
          if key is None:
              out = days
          else:
              raw[key] = days
              out = raw
          with open(feed_path,"w",encoding="utf-8") as f:
              json.dump(out, f, ensure_ascii=False, indent=2)
          print("Patched OK for", today)
          PY

      - name: Verify required fields for today
        run: |
          python3 - <<'PY'
          import json, os, sys
          from datetime import datetime
          try:
              from zoneinfo import ZoneInfo
          except Exception:
              ZoneInfo = None

          tz = os.environ.get("APP_TZ","UTC")
          today = (datetime.now(ZoneInfo(tz)).date().isoformat()
                   if ZoneInfo else datetime.utcnow().date().isoformat())

          feed_path = "${{ steps.locate.outputs.feed }}"
          with open(feed_path,"r",encoding="utf-8") as f:
              raw = json.load(f)

          if isinstance(raw, list):
              days = raw
          elif isinstance(raw, dict):
              days = raw.get("days") or raw.get("daily") or []
          else:
              print("ERROR: weeklyfeed.json is neither list nor object"); sys.exit(1)

          by = {str(e.get("date","")).strip(): e for e in days if isinstance(e, dict)}
          row = by.get(today)
          if not row:
              print(f"ERROR: No entry for today ({today}) in weeklyfeed.json"); sys.exit(1)

          required = [
            "quote","quoteCitation","firstReading","psalmSummary","gospelSummary",
            "saintReflection","dailyPrayer","theologicalSynthesis","exegesis",
            "usccbLink","cycle","weekdayCycle","gospelRef","firstReadingRef","psalmRef"
          ]
          missing = [k for k in required if not str(row.get(k,'')).strip()]
          if missing:
            print("ERROR: Missing/empty keys for today:", missing); sys.exit(1)
          print("OK for today:", today)
          PY

      - name: Run daily devotion update (Python)
        run: |
          python3 - <<'PY'
          import json, os, sys, pathlib
          from datetime import datetime
          try:
              from zoneinfo import ZoneInfo
          except Exception:
              ZoneInfo = None

          tz = os.environ.get("APP_TZ","UTC")
          today = (datetime.now(ZoneInfo(tz)).date().isoformat()
                   if ZoneInfo else datetime.utcnow().date().isoformat())

          feed_path = "${{ steps.locate.outputs.feed }}"
          with open(feed_path,"r",encoding="utf-8") as f:
              raw = json.load(f)

          if isinstance(raw, list):
              days = raw
          else:
              days = raw.get("days") or raw.get("daily") or []

          row = next((d for d in days if str(d.get("date","")).strip()==today), None)
          if not row:
              print("No row for today; exiting"); sys.exit(1)

          required = [
            "quote","quoteCitation","firstReading","psalmSummary","gospelSummary",
            "saintReflection","dailyPrayer","theologicalSynthesis","exegesis",
            "usccbLink","cycle","weekdayCycle","gospelRef","firstReadingRef","psalmRef"
          ]
          dev = {"date": today}
          for k in required:
              dev[k] = row.get(k,"")

          outdir = pathlib.Path("dist"); outdir.mkdir(exist_ok=True, parents=True)
          (outdir/"devotions.json").write_text(json.dumps(dev, ensure_ascii=False, indent=2), encoding="utf-8")
          print("Wrote dist/devotions.json")
          PY

      - name: Show dist/devotions.json header (post-generate)
        run: |
          head -n 60 dist/devotions.json || true

      - name: Prepare artifact for commit
        run: |
          mkdir -p public
          cp -f dist/devotions.json public/devotions.json

      - name: Show public/devotions.json header (post-copy)
        run: |
          head -n 60 public/devotions.json || true

      - name: Commit and push changes
        if: github.ref == 'refs/heads/main'
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add public/devotions.json || true
          if ! git diff --cached --quiet; then
            git commit -m "Daily devotion: $(date -u +%F)"
            git push
          else
            echo "No changes to commit."
          fi