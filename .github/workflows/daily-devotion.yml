name: Daily Devotion

on:
  schedule:
    - cron: '0 7 * * *'   # Runs daily at 07:00 UTC
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      APP_TZ: America/New_York

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build public/devotions-full.json and public/devotions.json
        run: |
          python3 - <<PY
          import json, pathlib
          from datetime import datetime
          from zoneinfo import ZoneInfo

          src = pathlib.Path("public/weeklyfeed.json")
          data = json.loads(src.read_text(encoding="utf-8"))

          tz = ZoneInfo("America/New_York")
          today = datetime.now(tz).date()

          def parse_iso(s):
              try:
                  return datetime.fromisoformat(s).date()
              except:
                  return None

          by_date = {
              parse_iso(item.get("date","")): item
              for item in data
              if parse_iso(item.get("date",""))
          }

          if today in by_date:
              entry = by_date[today]
          else:
              past = [d for d in by_date if d <= today]
              entry = by_date[max(past)] if past else list(by_date.values())[-1]

          # Wrap in arrays to satisfy schema
          out_summary = pathlib.Path("public/devotions.json")
          out_summary.write_text(
              json.dumps([entry], ensure_ascii=False, indent=2),
              encoding="utf-8"
          )

          out_full = pathlib.Path("public/devotions-full.json")
          out_full.write_text(
              json.dumps([entry], ensure_ascii=False, indent=2),
              encoding="utf-8"
          )

          print(f"Wrote daily devotions for {entry['date']}")
          PY

      - name: Validate JSON files against schema
        run: |
          pip install jsonschema
          python3 - <<PY
          import json, pathlib, sys
          from jsonschema import validate, ValidationError

          schema = json.loads(
              pathlib.Path("schemas/devotion.schema.json").read_text()
          )
          errors = False

          for file in ["public/devotions.json", "public/devotions-full.json"]:
              data = json.loads(pathlib.Path(file).read_text())
              try:
                  validate(instance=data, schema=schema)
                  print(f"{file}: valid")
              except ValidationError as e:
                  print(f"{file}: validation error: {e.message}")
                  errors = True

          if errors:
              sys.exit(1)
          PY

      - name: Archive previous files
        run: |
          today=$(date -u +'%Y-%m-%d')
          mkdir -p archive/public/daily/$today
          mv public/devotions.json        archive/public/daily/$today/ || true
          mv public/devotions-full.json   archive/public/daily/$today/ || true

      - name: Commit & push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add public/devotions.json public/devotions-full.json archive/public/daily/$today/*
          if ! git diff --cached --quiet; then
            git commit -m "Daily devotions for $today"
            git push
          else
            echo "No changes to commit."
          fi